/* Copyright (c) 2016	Andrey Mikhalevich, Katren ltd.*//*		Description*//** Requirements* @requires core/extend.js* @requires controls/ControlContainer.js* @requires controls/ButtonCtrl.js*//* constructor@param string id@param options{	@param string tagName	@param Grid grid	@param Control controlInsert	@param Control controlEdit	@param Control controlDelete	@param Control controlCopy	@param Control controlRefresh	@param Control controlPrint	@param bool cmdInsert Default true	@param bool cmdEdit Default true	@param bool cmdCopy Default true	@param bool cmdDelete Default true	@param bool cmdRefresh Default true	@param bool cmdPrint Default true	@param bool cmdFilter Default true	@param bool cmdPrintObj Default false	@param array of PrintObj printObjList	@param ListFiler filter	@param bool cmdSearch}*/function GridCommands(id,options){	options = options || {};		options.attrs = options.attrs || {};	options.className = options.className || options.attrs["class"] || this.DEF_CLASS_NAME;		GridCommands.superclass.constructor.call(this,		id,(options.tagName || this.DEF_TAG_NAME),options);	options.cmdInsert = (options.cmdInsert!=undefined)? options.cmdInsert:true;	options.cmdEdit = (options.cmdEdit!=undefined)? options.cmdEdit:options.cmdInsert;	options.cmdCopy = (options.cmdCopy!=undefined)? options.cmdCopy:options.cmdInsert;	options.cmdDelete = (options.cmdDelete!=undefined)? options.cmdDelete:options.cmdInsert;	options.cmdRefresh = (options.cmdRefresh!=undefined)? options.cmdRefresh:true;	options.cmdPrint = (options.cmdPrint!=undefined)? options.cmdPrint:true;	options.cmdFilter = (options.cmdFilter!=undefined)? options.cmdFilter:false;	options.cmdPrintObj = (options.cmdPrintObj!=undefined)? options.cmdPrintObj:false;	options.cmdPrintObj = (options.printObjList!=undefined)? true:options.cmdPrintObj;	options.cmdSearch = (options.cmdSearch!=undefined)? true:options.cmdSearch;		var self = this;		/* insert */	if (options.cmdInsert || options.controlInsert){		this.setControlInsert(options.controlInsert || new ButtonCtrl(id+":cmdInsert",			{"glyph":"glyphicon-plus",			"onClick":function(){				self.m_grid.onInsert();			},			"attrs":{"title":this.BTN_INSERT_TITLE}			})		);		}		if (options.cmdEdit || options.controlEdit){		this.setControlEdit(options.controlEdit || new ButtonCtrl(id+":cmdEdit",			{"glyph":"glyphicon-pencil",			"onClick":function(){				self.m_grid.onEdit();			},			"attrs":{"title":this.BTN_EDIT_TITLE}			})		);		}		//copy		if(options.cmdCopy || options.controlCopy){		this.setControlCopy(options.controlCopy || new ButtonCtrl(id+":cmdCopy",			{"glyph":"glyphicon-copy",			"onClick":function(event){				self.m_grid.onCopy();			},			"attrs":{"title":this.BTN_COPY_TITLE}			})		);	}			if (options.cmdDelete || options.controlDelete){		this.setControlDelete(options.controlDelete || new ButtonCtrl(id+":cmdDelete",			{"glyph":"glyphicon-remove",			"onClick":function(){				self.m_grid.onDelete();			},			"attrs":{"title":this.BTN_DELETE_TITLE}			})		);			}	if (options.cmdColumnManager || options.controlColumnManager){		this.setControlDelete(options.controlColumnManager || new ButtonCtrl(id+":cmdColumnManager",			{"glyph":"glyphicon-th-list",			"onClick":function(){				self.onColumnManager();			},			"attrs":{"title":this.BTN_COL_MANAGER_TITLE}			})		);			}				if (options.cmdPrint || options.controlPrint){		this.setControlPrint(options.controlPrint || new ButtonCtrl(id+":cmdPrint",			{"glyph":"glyphicon-print",			"onClick":function(e){				self.m_grid.onPrint();			},			"attrs":{"title":this.BTN_PRINT_TITLE}			})		);			}		//refresh	if (options.cmdRefresh || options.controlRefresh){		this.setControlRefresh(options.controlRefresh || new ButtonCtrl(id+":cmdRefresh",			{"glyph":"glyphicon-refresh",			"onClick":function(){				self.m_grid.onRefresh();			},			"attrs":{"title":this.BTN_REFRESH_TITLE}			})		);	}	//print obj	if (options.cmdPrintObj){		this.setControlPrintObj(options.controlPrintObj || new ButtonPrintList(id+":cmdPrintObj",			{"printList":options.printObjList,			"keyIds":options.printObjListKeyIds,			"app":options.app			})		);	}		//refresh	if (options.cmdSearch || options.controlSearch){		this.setControlSearch(options.controlSearch || new ButtonCtrl(id+":cmdSearch",			{"glyph":"glyphicon-search",			"onClick":function(){				self.onSearch();			},			"attrs":{"title":this.BTN_SEARCH_TITLE}			})		);	}		if (options.cmdFilter){		this.setControlFilter(options.controlFilter || new GridFilter(CommonHelper.uniqid(),{			"filters":options.filters,			"app":options.app			})		);			this.setControlFilterToggle(options.controlFilterToggle || new ButtonCtrl(id+":cmdToggle",{			"attrs":{				//"data-toggle":"collapse",				//"data-target":("#"+this.m_controlFilter.getId()),				"title":this.m_controlFilter.DEF_TOGGLE_CTRL_TITLE			},			"onClick":function(){				var filter = self.getControlFilter();								$(filter.getNode()).collapse("toggle");				if (!DOMHelper.hasClass(filter.getNode(),"in")){					var filters = filter.getFilter().getFilters();					for (var id in filters){						filters[id].binding.getControl().focus();						break;					}				}			},			"caption":this.m_controlFilter.DEF_TOGGLE_CTRL_CAP,			"glyph":"glyphicon-triangle-bottom",			"app":options.app			})		);				}		this.m_popUpMenu = options.popUpMenu;		this.addControls();	}extend(GridCommands,ControlContainer);/* Constants */GridCommands.prototype.DEF_TAG_NAME = "div";GridCommands.prototype.DEF_CLASS_NAME = "btn-group";/* Private */GridCommands.prototype.m_grid;GridCommands.prototype.m_controlInsert;GridCommands.prototype.m_controlEdit;GridCommands.prototype.m_controlCopy;GridCommands.prototype.m_controlDelete;GridCommands.prototype.m_controlPrint;GridCommands.prototype.m_controlRefresh;GridCommands.prototype.m_controlFilterToggle;GridCommands.prototype.m_controlFilter;GridCommands.prototype.m_controlColumnManager;GridCommands.prototype.m_controlPrintObj;GridCommands.prototype.m_controlSearch;GridCommands.prototype.popUpMenu;/* override in extendet classes*/GridCommands.prototype.addControls = function(){	if (this.m_controlInsert) this.addElement(this.m_controlInsert);	if (this.m_controlEdit) this.addElement(this.m_controlEdit);	if (this.m_controlCopy) this.addElement(this.m_controlCopy);	if (this.m_controlDelete) this.addElement(this.m_controlDelete);	if (this.m_controlPrint) this.addElement(this.m_controlPrint);	if (this.m_controlColumnManager) this.addElement(this.m_controlColumnManager);	if (this.m_controlRefresh) this.addElement(this.m_controlRefresh);	if (this.m_controlPrintObj) this.addElement(this.m_controlPrintObj);	if (this.m_controlSearch) this.addElement(this.m_controlSearch);		if (this.m_controlFilter){		this.addElement(this.m_controlFilterToggle);		this.addElement(this.m_controlFilter);	}		if (this.m_popUpMenu){		this.toPopUp(this.m_popUpMenu);	}}/* Public */GridCommands.prototype.setGrid = function(v){	this.m_grid = v;	if (this.m_controlFilter){		var self = this;		this.m_controlFilter.setOnRefresh(function(){			self.m_grid.onRefresh();		});	}	if (this.m_controlPrintObj){		this.m_controlPrintObj.setGrid(this.m_grid);		}		if (this.m_popUpMenu){		this.selectToPopUp();	}}GridCommands.prototype.getGrid = function(){	return this.m_grid;}GridCommands.prototype.setEnabled = function(en){	if(this.m_controlInsert) this.m_controlInsert.setEnabled(en);	if(this.m_controlEdit) this.m_controlEdit.setEnabled(en);	if(this.m_controlCopy) this.m_controlCopy.setEnabled(en);	if(this.m_controlDelete) this.m_controlDelete.setEnabled(en);	if(this.m_controlPrint) this.m_controlPrint.setEnabled(en);	if(this.m_controlColumnManager) this.m_controlColumnManager.setEnabled(en);	if(this.m_controlRefresh) this.m_controlRefresh.setEnabled(en);	if(this.m_controlSearch) this.m_controlSearch.setEnabled(en);	if(this.m_controlFilterToggle) this.m_controlFilterToggle.setEnabled(en);	if(this.m_controlFilter) this.m_controlFilter.setEnabled(en);		GridCommands.superclass.setEnabled.call(this,en);}GridCommands.prototype.printObjToPopUp = function(){	if(this.m_controlPrintObj && this.m_popUpMenu){		//print forms		this.m_popUpMenu.addSeparator();				var id = this.getId();		this.m_printObjList = this.m_controlPrintObj.getObjList();		var self = this;		for (var i=0;i<this.m_printObjList.length;i++){			this.m_popUpMenu.addButton(new ButtonCtrl(null,{				"caption":this.m_printObjList[i].getCaption(),				"attrs":{"objInd":i},				"onClick":function(){					self.m_printObjList[this.getAttr("objInd")].onClick();				}			}));		}	} }GridCommands.prototype.selectToPopUp = function(){	if (this.m_grid && this.m_grid.getOnSelect()){		if (this.m_controlInsert		||this.m_controlEdit		||this.m_controlCopy		||this.m_controlDelete		||this.m_controlPrint		||this.m_controlColumnManager		||this.m_controlRefresh		||this.m_controlSearch		){			this.m_popUpMenu.addSeparator();		}			var self = this;		this.m_popUpMenu.addButton(new ButtonCtrl(null,{			"caption":"Выбрать",			"onClick":function(){				self.m_grid.onSelect();			}		}));			}}GridCommands.prototype.toPopUp = function(){	//this.selectToPopUp();	if(this.m_controlInsert) this.m_popUpMenu.addButton(this.m_controlInsert);	if(this.m_controlEdit) this.m_popUpMenu.addButton(this.m_controlEdit);	if(this.m_controlCopy) this.m_popUpMenu.addButton(this.m_controlCopy);	if(this.m_controlDelete) this.m_popUpMenu.addButton(this.m_controlDelete);	if(this.m_controlPrint) this.m_popUpMenu.addButton(this.m_controlPrint);	if(this.m_controlColumnManager) this.m_popUpMenu.addButton(this.m_controlColumnManager);	if(this.m_controlSearch) this.m_popUpMenu.addButton(this.m_controlSearch);	if(this.m_controlRefresh) this.m_popUpMenu.addButton(this.m_controlRefresh);		this.printObjToPopUp();	}GridCommands.prototype.getControlInsert = function(){	return this.m_controlInsert;}GridCommands.prototype.getCmdInsert = function(){	return this.m_controlInsert;}GridCommands.prototype.setControlInsert = function(v){	this.m_controlInsert = v;}GridCommands.prototype.getControlEdit = function(){	return this.m_controlEdit;}GridCommands.prototype.getCmdEdit = function(){	return this.m_controlEdit;}GridCommands.prototype.setControlEdit = function(v){	this.m_controlEdit = v;}GridCommands.prototype.getControlCopy = function(){	return this.m_controlCopy;}GridCommands.prototype.getCmdCopy = function(){	return this.m_controlCopy;}GridCommands.prototype.setControlCopy = function(v){	this.m_controlCopy = v;}GridCommands.prototype.getControlDelete = function(){	return this.m_controlDelete;}GridCommands.prototype.getCmdDelete = function(){	return this.m_controlDelete;}GridCommands.prototype.setControlDelete = function(v){	this.m_controlDelete = v;}GridCommands.prototype.getControlPrint = function(){	return this.m_controlPrint;}GridCommands.prototype.getCmdPrint = function(){	return this.m_controlPrint;}GridCommands.prototype.setControlPrint = function(v){	this.m_controlPrint = v;}GridCommands.prototype.getControlRefresh = function(){	return this.m_controlRefresh;}GridCommands.prototype.getCmdRefresh = function(){	return this.m_controlRefresh;}GridCommands.prototype.setControlRefresh = function(v){	this.m_controlRefresh = v;}GridCommands.prototype.getControlFilter = function(){	return this.m_controlFilter;}GridCommands.prototype.setControlFilter = function(v){	this.m_controlFilter = v;}GridCommands.prototype.getControlFilterToggle = function(){	return this.m_controlFilterToggle;}GridCommands.prototype.setControlFilterToggle = function(v){	this.m_controlFilterToggle = v;}GridCommands.prototype.getControlColumnManager = function(){	return this.m_controlColumnManager;}GridCommands.prototype.setControlColumnManager = function(v){	this.m_controlColumnManager = v;}GridCommands.prototype.getControlPrintObj = function(){	return this.m_controlPrintObj;}GridCommands.prototype.setControlPrintObj = function(v){	this.m_controlPrintObj = v;}GridCommands.prototype.getControlSearch = function(){	return this.m_controlSearch;}GridCommands.prototype.setControlSearch = function(v){	this.m_controlSearch = v;}GridCommands.prototype.onColumnManager = function(){	var btnCont = this;	var self = this;	this.m_colManform = new WindowFormModalBS(uuid(),{		"content":new ViewGridColumnManager(uuid(),{			"grid":this.m_grid,			"onClose":function(){				btnCont.m_colManform.close();				self.m_grid.onRefresh.call(self.m_grid);			},			"app":this.getApp()		})	});	this.m_colManform.open();}