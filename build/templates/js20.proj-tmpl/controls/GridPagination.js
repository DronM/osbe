/**	 * @author Andrey Mikhalevich <katrenplus@mail.ru>,2016 * @class * @classdesc grid object   * @requires core/extend.js * @requires controls/Control.js  * @param {string} id Object identifier * @param {Object} options * @param {int} [options.showPageCount=DEF_PAGES]  * @param {Button} [options.ctrlGoFirst=Button] * @param {boolean} [options.cmdGoFirst=true]  * @param {Button} [options.ctrlGoLast=Button] * @param {boolean} [options.cmdGoLast=true]  * @param {Button} [options.ctrlGoPrev=Button] * @param {boolean} [options.cmdGoPrev=true]  * @param {Button} [options.ctrlGoNext=Button] * @param {boolean} [options.cmdGoNext=true] * @param {String} [options.ctrlClassName=DEF_CTRL_CLASS_NAME] * @param {String} [options.ctrlGoFirstGlyph=DEF_CTRL_GO_FIRST_GLYPH] * @param {String} [options.ctrlGoNextGlyph=DEF_CTRL_GO_NEXT_GLYPH] * @param {String} [options.ctrlGoPrevGlyph=DEF_CTRL_GO_PREV_GLYPH]                            * @param {String} [options.ctrlGoMastGlyph=DEF_CTRL_GO_LAST_GLYPH]                             * @param {String} [options.pagesTagName=DEF_PAGES_TAG_NAME] * @param {String} [options.pagesClassName=DEF_PAGES_CLASS_NAME]    * @param {String} [options.pageClassName=DEF_PAGE_CLASS_NAME] * @param {String} [options.pageCurClassName=DEF_PAGE_CUR_CLASS_NAME] * @param {String} [options.pageTagName=DEF_PAGE_TAG_NAME]                                                             * @param {String} [options.ctrlGoFirstCaption=""] * @param {String} [options.ctrlGoNextCaption=""] * @param {String} [options.ctrlGoPrevCaption=""] * @param {String} [options.ctrlGoLastCaption=""]  */function GridPagination(id,options){	options = options || {};		GridPagination.superclass.constructor.call(this, id, (options.tagName || this.DEF_TAG_NAME), options);				var self = this;		this.m_inf = new Control(id+":inf","span");	this.m_showPageCount = (options.showPageCount)? parseInt(options.showPageCount):this.DEF_PAGES;	if (this.m_showPageCount){		this.m_pages = new ControlContainer(id+":pages",options.pagesTagName||this.DEF_PAGES_TAG_NAME,{"className":options.pagesClassName||this.DEF_PAGES_CLASS_NAME});	}		this.setPageClassName(options.pageClassName || this.DEF_PAGE_CLASS_NAME);	this.setPageCurClassName(options.pageCurClassName || this.DEF_PAGE_CUR_CLASS_NAME);	this.setPageTagName(options.pageTagName || this.DEF_PAGE_TAG_NAME);		//buttons	this.m_btnsCont = new ControlContainer(id+":bns_cont","SPAN",{"className":"pagination-pages"});			var ctrl_class = options.ctrlClassName || this.DEF_CTRL_CLASS_NAME;		if (options.ctrlGoFirst || options.cmdGoFirst==undefined || options.cmdGoFirst==true){		this.m_ctrlGoFirst = options.ctrlGoFirst || new Button(id+":go_first",			{"glyph":(options.ctrlGoFirstCaption!=undefined)? null:options.ctrlGoFirstGlyph||this.DEF_CTRL_GO_FIRST_GLYPH,			"caption":options.ctrlGoFirstCaption || "",			"className":ctrl_class,			"onClick":function(){				self.goFirst();			},			"attrs":{"title":this.CONTR_GO_FIRST_TITLE}		});		this.m_btnsCont.addElement(this.m_ctrlGoFirst);	}		if (options.ctrlGoPrev || options.cmdGoPrev==undefined || options.cmdGoPrev==true){			this.m_ctrlGoPrev = new Button(id+":go_prev",			{"glyph":(options.ctrlGoPrevCaption!=undefined)? null:options.ctrlGoPrevGlyph||this.DEF_CTRL_GO_PREV_GLYPH,			"caption":options.ctrlGoPrevCaption || "",			"className":ctrl_class,			"onClick":function(){				self.goPrev();			},			"attrs":{"title":this.CONTR_GO_PREV_TITLE}			});		this.m_btnsCont.addElement(this.m_ctrlGoPrev);	}			if (options.ctrlGoNext || options.cmdGoNext==undefined || options.cmdGoNext==true){			this.m_ctrlGoNext = new Button(id+":go_next",{			"glyph":(options.ctrlGoNextCaption!=undefined)? null:options.ctrlGoNextGlyph||this.DEF_CTRL_GO_NEXT_GLYPH,			"caption":options.ctrlGoNextCaption || "",			"className":ctrl_class,			"onClick":function(){				self.goNext();			},			"attrs":{"title":this.CONTR_GO_NEXT_TITLE}		});			this.m_btnsCont.addElement(this.m_ctrlGoNext);	}		if (options.ctrlGoLast || options.cmdGoLast==undefined || options.cmdGoLast==true){				this.m_ctrlGoLast = new Button(id+":go_last",{			"glyph":(options.ctrlGoLastCaption!=undefined)? null:options.ctrlGoLastGlyph||this.DEF_CTRL_GO_LAST_GLYPH,			"caption":options.ctrlGoLastCaption || "",			"className":ctrl_class,			"onClick":function(){				self.goLast();			},			"attrs":{"title":this.CONTR_GO_LAST_TITLE}		});			this.m_btnsCont.addElement(this.m_ctrlGoLast);	}			options.from = options.from || 0;//	console.log("From="+options.from)	this.setFrom(options.from);		if (options.countPerPage){		this.setCountPerPage(options.countPerPage);	}	}extend(GridPagination,Control);GridPagination.prototype.DEF_PAGES = 10;GridPagination.prototype.DEF_TAG_NAME = "DIV";GridPagination.prototype.DEF_CTRL_CLASS_NAME = "btn btn-xs";GridPagination.prototype.DEF_CTRL_GO_FIRST_GLYPH = "glyphicon-fast-backward";GridPagination.prototype.DEF_CTRL_GO_PREV_GLYPH = "glyphicon-step-backward";GridPagination.prototype.DEF_CTRL_GO_NEXT_GLYPH = "glyphicon-step-forward";GridPagination.prototype.DEF_CTRL_GO_LAST_GLYPH = "glyphicon-fast-forward";GridPagination.prototype.DEF_PAGE_CLASS_NAME = "pagination-page";GridPagination.prototype.DEF_PAGE_CUR_CLASS_NAME = "pagination-page badge pagination-page-cur";GridPagination.prototype.DEF_PAGE_TAG_NAME = "SPAN";GridPagination.prototype.DEF_PAGES_TAG_NAME = "SPAN";GridPagination.prototype.DEF_PAGES_CLASS_NAME = "pagination-pages";GridPagination.prototype.m_countTotal;GridPagination.prototype.m_countPerPage;GridPagination.prototype.m_from;GridPagination.prototype.m_inf;GridPagination.prototype.m_grid;GridPagination.prototype.m_pageClassName;GridPagination.prototype.m_pageCurClassName;GridPagination.prototype.m_pageTagName;GridPagination.prototype.getFrom = function(){	return this.m_from;}GridPagination.prototype.getCountPerPage = function(){	return this.m_countPerPage;}GridPagination.prototype.setCountTotal = function(countTotal){	this.m_countTotal = parseInt(countTotal);	this.setInf();}GridPagination.prototype.setCountPerPage = function(countPerPage){	this.m_countPerPage = parseInt(countPerPage);	}GridPagination.prototype.setFrom = function(from){	this.m_from = parseInt(from);		this.setInf();}GridPagination.prototype.reset = function(){	this.m_from = undefined;}GridPagination.prototype.setGrid = function(v){	this.m_grid = v;}GridPagination.prototype.setFirstEnabled = function(enabled){	//this.m_from = from;}GridPagination.prototype.goFirst = function(){	this.setFrom(0);	this.m_grid.onRefresh();	this.m_grid.focus();}GridPagination.prototype.goPrev = function(){	this.setFrom(Math.max(0,this.m_from - this.m_countPerPage));	this.m_grid.onRefresh();	this.m_grid.focus();}GridPagination.prototype.goNext = function(){	var from = this.m_from + this.m_countPerPage;	from = (from>=this.m_countTotal)? this.m_from:from;	this.setFrom(from);	this.m_grid.onRefresh();	this.m_grid.focus();}GridPagination.prototype.goLast = function(){	var pages = Math.floor(this.m_countTotal / this.m_countPerPage);	if ((this.m_countTotal % this.m_countPerPage)==0){		pages--;	}	this.setFrom(pages*this.m_countPerPage);	this.m_grid.onRefresh();	this.m_grid.focus();}GridPagination.prototype.setInf = function(){	var pages = Math.ceil(this.m_countTotal / this.m_countPerPage);		var page = Math.ceil(this.m_from / this.m_countPerPage)+1;	if (isNaN(pages)) pages = 1;	if (isNaN(page)) page = 1;		this.m_inf.setValue(this.CONTR_INF_PAGE+pages);		if(this.m_ctrlGoFirst)this.m_ctrlGoFirst.setEnabled((page>1));	if(this.m_ctrlGoPrev)this.m_ctrlGoPrev.setEnabled((page>1));			if (page == pages){		if(this.m_ctrlGoLast)this.m_ctrlGoLast.setEnabled(false);		if(this.m_ctrlGoNext)this.m_ctrlGoNext.setEnabled(false);	}	else{		if(this.m_ctrlGoLast)this.m_ctrlGoLast.setEnabled(true);		if(this.m_ctrlGoNext)this.m_ctrlGoNext.setEnabled(true);	}		if (this.m_showPageCount && this.m_inf.getNode().parentNode){		this.m_pages.delDOM();		this.m_pages.clear();				var self = this;				//previous		var prev_from = page - this.m_showPageCount;		if (prev_from<1) prev_from = 1;		for (var pg=prev_from; pg < page; pg++){			this.m_pages.addElement(this.createPageElement({				"className":this.getPageClassName(),				"attrs":{"title":this.GO_TO_PAGE+pg,"to_page":pg},				"value":pg,				"events":{					"click":function(e){						self.goToPageFromEvent(e);					}				}			}));					/*			this.m_pages.addElement(new Control(null,this.getPageTagName(),{				"className":this.getPageClassName(),				"attrs":{"title":this.GO_TO_PAGE+pg,"to_page":pg},				"value":pg,				"events":{					"click":function(e){						self.goToPageFromEvent(e);					}				}			}));			*/		}				//current		if (pages>1){			this.m_pages.addElement(this.createPageElement({				"className":this.getPageCurClassName(),				"attrs":{"title":this.CONTR_PG_CNT},				"value":page			}));					/*			this.m_pages.addElement(new Control(null,this.getPageTagName(),{				"className":this.getPageCurClassName(),				"attrs":{"title":this.CONTR_PG_CNT},				"value":page			}));			*/		}						//next		var nxt_to = page + this.m_showPageCount;		if (nxt_to>pages) nxt_to = pages;		for (var pg=page+1; pg <= nxt_to; pg++){			this.m_pages.addElement(this.createPageElement({				"className":this.getPageClassName(),				"attrs":{"title":this.CONTR_INF_PAGE+pg,"to_page":pg},				"value":pg,				"events":{					"click":function(e){						self.goToPageFromEvent(e);					}				}			})			);			/*			this.m_pages.addElement(new Control(null,this.getPageTagName(),{				"className":this.getPageClassName(),				"attrs":{"title":this.CONTR_INF_PAGE+pg,"to_page":pg},				"value":pg,				"events":{					"click":function(e){						self.goToPageFromEvent(e);					}				}			}));			*/		}				this.m_pages.toDOMAfter(this.m_btnsCont.getNode());	}}GridPagination.prototype.goToPageFromEvent = function(e){	e = EventHelper.fixMouseEvent(e);	var pg = DOMHelper.getAttr(e.target,"to_page");	this.setFrom((pg-1)*this.m_countPerPage);	this.m_grid.onRefresh();}GridPagination.prototype.toDOM = function(parent){	GridPagination.superclass.toDOM.call(this,parent);	this.m_inf.toDOM(this.m_node);	this.m_btnsCont.toDOM(this.m_node);		this.setInf();	}GridPagination.prototype.delDOM = function(){	if (this.m_showPageCount){		this.m_pages.delDOM();	}	this.m_inf.delDOM();		this.m_btnsCont.delDOM();	GridPagination.superclass.delDOM.call(this);		}GridPagination.prototype.setPageClassName = function(v){	this.m_pageClassName = v;}GridPagination.prototype.getPageClassName = function(){	return this.m_pageClassName;}GridPagination.prototype.setPageCurClassName = function(v){	this.m_pageCurClassName = v;}GridPagination.prototype.getPageCurClassName = function(){	return this.m_pageCurClassName;}GridPagination.prototype.setPageTagName = function(v){	this.m_pageTagName = v;}GridPagination.prototype.getPageTagName = function(){	return this.m_pageTagName;}GridPagination.prototype.createPageElement = function(options){	return (new Control(null,this.getPageTagName(),options));}