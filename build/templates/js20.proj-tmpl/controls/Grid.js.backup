/* Copyright (c) 2016	Andrey Mikhalevich, Katren ltd.*//*		Description*//** Requirements * @requires controls/WindowQuestion.js * @requires controls/GridHead.js * @requires controls/GridBody.js * @requires controls/GridFoot.js * @requires controls/GridPagination.js     *//* constructor@param string id@param object options{	@param string className||class	@param bool rowSelect Default true	@param bool cmdInsert Default true	@param bool cmdEdit Default true	@param bool cmdCopy Default true	@param bool cmdPrint Default true	@param GridCommands commands	@param Model model		@param View editViewClass	@param object editViewOptions	@param WindowFormObject editWinClass		@param int refreshInterval Default 0	@param bool editInline	@param RowCommandClass rowCommandClass	@param function onSelect triggers select mode, event is fired when row is selected (dblclick or enter)	@param bool multySelect	enables multy row selection	@param bool autoRefresh Default false	@param GridHead head	@param GridBody body	@param GridFoot foot	@param GridPagination pagination	@param bool rowSelect Default true	@param bool resize Default true ToDo!!!	@param string contClassName	@param function onEventRefresh	@param PopUpMenu popUpMenu	@param function onEventRefresh		@param bool navigate Default true	@param bool fixedHeader	@param int fixedOffset	@param function onEventSetRowClass is fired when setting a row class	@param Control rowClass Default GridRow	@param array keyIds for cases when id field is not present in grid	@param bool lastRowFooter	@param function onRefresh this func will be executed after gird onRefresh is done}*/function Grid(id,options){	options = options || {};	options.className = options.className || this.DEF_CLASS;		/* if node exists it will be a container!!!*/	var n = CommonHelper.nd(id,this.getWinObjDocument());	if (n){		n.id = n.id + ":cont";	}				this.setOnSelect(options.onSelect || window.onSelect);	//this.setMultySelect(options.multySelect || window.multySelect);		if (options.commands){		options.commands.setGrid(this);		this.setCommands(options.commands);				if (options.commands.getControlInsert()){			options.cmdInsert = true;		}		if (options.commands.getControlEdit()){			options.cmdEdit = true;		}		if (options.commands.getControlCopy()){			options.cmdCopy = true;		}		if (options.commands.getControlDelete()){			options.cmdDelete = true;		}		if (options.commands.getControlPrint()){			options.cmdPrint = true;		}		if (options.commands.getControlRefresh()){			options.cmdRefresh = true;		}			}		this.setCmdInsert((options.cmdInsert!=undefined)? options.cmdInsert:true);	this.setCmdEdit((options.cmdEdit!=undefined)? options.cmdEdit:this.getCmdInsert());	this.setCmdCopy((options.cmdCopy!=undefined)? options.cmdCopy:this.getCmdInsert());	this.setCmdDelete((options.cmdDelete!=undefined)? options.cmdDelete:this.getCmdInsert());	this.setCmdPrint((options.cmdPrint!=undefined)? options.cmdPrint:true);			Grid.superclass.constructor.call(this,		id,(options.tagName || this.DEF_TAG_NAME),options);	this.setModel(options.model);			this.setEditWinClass(options.editWinClass);		this.setEditViewClass(options.editViewClass);	this.setEditViewOptions(options.editViewOptions);			this.setEditInline(options.editInline);		this.setRefreshInterval(options.refreshInterval || this.DEF_REFRESH_INTERVAL);	this.setRowCommandClass(options.rowCommandClass);			this.setAutoRefresh( (options.autoRefresh!=undefined)? options.autoRefresh:false );		this.setHead(options.head);	this.setBody(options.body || new GridBody(id+":body",{"name":"body","app":this.getApp()}));	this.setFoot(options.foot);		var self = this;		/*	if (!options.pagination && options.model && ){	}	*/		if (options.pagination){		this.setPagination(options.pagination);		options.pagination.setOnGridRefresh(function(){			self.onRefresh();		});	}		this.setPopUpMenu(options.popUpMenu);		this.setRowSelect( (options.rowSelect!=undefined)?  options.rowSelect:true );		this.setContClassName(options.contClassName);		this.setRowClass(options.rowClass || GridRow);		this.setLastRowFooter(options.lastRowFooter);		this.m_onEventRefresh = options.onEventRefresh;	this.m_onEventSetRowClass = options.onEventSetRowClass;		this.setResize((options.resize!=undefined)? options.resize:true);		this.setNavigate((options.navigate!=undefined)? options.navigate:true);		this.m_onRefresh = options.onRefresh;			this.m_keyIds = options.keyIds || [];		this.m_keyEvent = function(e){		if (self.getEnabled() && self.getFocused()){			e = EventHelper.fixKeyEvent(e);			//var key_code = (event.charCode) ? event.charCode : event.keyCode;			if (self.keyPressEvent(e.keyCode,e)){				if (e.preventDefault){					e.preventDefault();				}				e.stopPropagation();				return false;			}		}	};	this.m_focusEvent = function(){		//console.log("focusEvent");		self.setFocused(true);	}	this.m_blurEvent = function(){		//console.log("blurEvent");		self.setFocused(false);			}		this.m_clickEvent = function(ev){		self.onClick(ev);		/*		if (!self.m_tappedTwice){									self.m_tappedTwice = true;												setTimeout( function() { self.m_tappedTwice=false; }, 300 );			return;		}		ev.preventDefault();					//self.onDblClick(ev);		self.m_tappedTwice = false;				*/	};		this.m_dblClickEvent = function(ev){		self.onDblClick(ev);	};			//sorting	this.m_sortCols = {};	var head = this.getHead();	if (head){		for (var row in head.m_elements){			var head_row = head.m_elements[row];			for (var col in head_row.m_elements){				if (head_row.m_elements[col].getSortable()){					this.m_sortCols[col] = head_row.m_elements[col];					head_row.m_elements[col].m_onRefresh = function(){						self.onRefresh();					}				}			}		}	}		//fixed header	if (options.fixedHeader){		this.m_fixedHeader = true;		this.m_fixedOffset = options.fixedOffset||0;	}		this.m_editWinObjList = {};}extend(Grid, Control);/* Constants */Grid.prototype.DEF_TAG_NAME = "table";Grid.prototype.SELECTED_CLASS = "success";Grid.prototype.FOCUSED_CLASS = "focused";Grid.prototype.DEF_CLASS = "table table-bordered table-responsive table-striped";Grid.prototype.DEF_TAB_INDEX = "100";Grid.prototype.DEF_REFRESH_INTERVAL = "0";/* Private */Grid.prototype.m_commands;Grid.prototype.m_pagination;Grid.prototype.m_head;Grid.prototype.m_body;Grid.prototype.m_foot;Grid.prototype.m_editInline;Grid.prototype.m_editWinClass;Grid.prototype.m_editWinObj;Grid.prototype.m_editWinObjList;Grid.prototype.m_editViewClass;Grid.prototype.m_editViewOptions;Grid.prototype.m_editViewObj;Grid.prototype.m_rowCommandPanelClass;Grid.prototype.m_refInterval;Grid.prototype.m_refIntervalObj;Grid.prototype.m_onSelect;//Grid.prototype.m_multySelect;Grid.prototype.m_onEventRefresh;Grid.prototype.m_onEventSetRowClass;Grid.prototype.m_onEventDelete;Grid.prototype.m_onEventInsert;Grid.prototype.m_contClassName;Grid.prototype.m_popUpMenu;Grid.prototype.m_rowSelect;Grid.prototype.m_resize;Grid.prototype.m_navigate;Grid.prototype.m_cmdInsert;Grid.prototype.m_cmdEdit;Grid.prototype.m_cmdCopy;Grid.prototype.m_cmdDelete;Grid.prototype.m_cmdPrint;Grid.prototype.m_model;Grid.prototype.m_selectedRowKeys;Grid.prototype.m_selectedRowId;Grid.prototype.m_rowClass;Grid.prototype.m_container;Grid.prototype.m_containerScroll;Grid.prototype.m_lastRowFooter;//temp valuesGrid.prototype.m_interval;Grid.prototype.m_parent;//NavigationGrid.prototype.initNavigation = function(){	this.setFocused(true);	EventHelper.add(this.m_node,"focus",this.m_focusEvent,false);	EventHelper.add(this.m_node,"blur",this.m_blurEvent,false);}Grid.prototype.addKeyEvents = function(){	EventHelper.add(this.m_node,'keydown',this.m_keyEvent,false);	EventHelper.add(this.m_node,"click",this.m_clickEvent,false);	EventHelper.add(this.m_node,"contextmenu",this.m_clickEvent,false);	if (this.m_cmdEdit){		EventHelper.add(this.m_node,'dblclick',this.m_dblClickEvent,false);	}				}Grid.prototype.delKeyEvents = function(){	EventHelper.del(this.m_node,'keydown',this.m_keyEvent,false);	EventHelper.del(this.m_node,"click",this.m_clickEvent,false);	EventHelper.del(this.m_node,"contextevent",this.m_clickEvent,false);	if (this.m_cmdEdit){		EventHelper.del(this.m_node,'dblclick',this.m_dblClickEvent,false);	}		}Grid.prototype.selectFirstSelectableCell = function(row){	var cells=row.getElementsByTagName("td");	for (var i=0;i<cells.length;i++){		if (this.getCellSelectable(cells[i])){			this.selectCell(cells[i]);			break;		}	}			}Grid.prototype.setSelection = function(){	var selected=false;	if (this.m_selectedRowKeys){		var rows = this.m_body.getNode().getElementsByTagName("tr");		for (var i=0;i<rows.length;i++){			if (rows[i].getAttribute("keys")==this.m_selectedRowKeys){				if (this.m_rowSelect) {					this.selectRow(rows[i]);					selected = true;								}				else{					if (rows[i].childNodes.length>this.m_selectedCellInd){						this.selectCell(rows[i].childNodes[this.m_selectedCellInd]);					}					else{						this.selectFirstSelectableCell(rows[i]);					}					selected=true;				}								break;			}					}	}	if (!selected){		var rows=this.m_body.getNode().getElementsByTagName("tr");		if (rows && rows.length>0){						if (this.m_rowSelect){				//var row_body_ind = this.getHead().getCount();				for (var i=0;i<rows.length;i++){					if (this.getRowSelectable(rows[i])){						this.selectRow(rows[i]);						break;					}				}			}			else{				this.selectFirstSelectableCell(rows[this.getHead().getCount()]);			}		}	}}Grid.prototype.keyPressEvent = function(keyCode,event){		var res=false;	switch (keyCode){		case 40: // arrow down							res = this.onNextRow();			break;		case 38: // arrow up			res = this.onPreviousRow();			break;		case 39: // arrow right			this.onNextColumn();			break;		case 37: // arrow left			res = this.onPreviousColumn();			break;		case 13: // return			res = this.onEditSelect(event);						break;		case 46: // delete			res = this.onDelete();			break;		case 45: // insert			res = this.onInsert();			break;						case 120: // F9			res = this.onCopy();			break;										case 80: // P			if (event.ctrlKey){				res = this.onPrint();			}							break;													}			return res;}Grid.prototype.onPreviousColumn = function(){		res = false;	if (!this.m_rowSelect){		var selected_node = this.getSelectedNode();		if (selected_node && selected_node.previousSibling && this.getCellSelectable(selected_node.previousSibling)){			this.selectCell(selected_node.previousSibling, selected_node);		}		res = true;	}	return res;}Grid.prototype.onNextColumn = function(){		var res = false;	if (!this.m_rowSelect){		var selected_node = this.getSelectedNode();		if (selected_node && selected_node.nextSibling && this.getCellSelectable(selected_node.nextSibling)){			this.selectCell(selected_node.nextSibling, selected_node);		}								res = true;	}					return res;}Grid.prototype.onPreviousRow = function(){		var res = false;	var selected_node = this.getSelectedNode();		if (selected_node && this.m_rowSelect && selected_node.previousSibling	&& (selected_node.previousSibling.nodeName == selected_node.nodeName)	&& this.getRowSelectable(selected_node.previousSibling)	){		/*Row selection*/		this.selectRow(selected_node.previousSibling, selected_node);		res = true;	}		else if (selected_node && !this.m_rowSelect	&& selected_node.parentNode.previousSibling	&& (selected_node.parentNode.previousSibling.nodeName == selected_node.parentNode.nodeName)	&& this.getCellSelectable(selected_node.parentNode.previousSibling)	){		/*Cell selection*/		var ind = DOMHelper.getElementIndex(selected_node);		this.selectCell(selected_node.parentNode.previousSibling.childNodes[ind], selected_node);		res = true;	}					return res;}Grid.prototype.onNextRow = function(){		var res = false;	var selected_node = this.getSelectedNode();		if (selected_node && this.m_rowSelect && selected_node.nextSibling	&& (selected_node.nextSibling.nodeName==selected_node.nodeName)	&& this.getRowSelectable(selected_node.nextSibling)	){		/*Row selection*/		this.selectRow(selected_node.nextSibling, selected_node);		res = true;	}	else if (selected_node && !this.m_rowSelect && selected_node.parentNode.nextSibling	&& (selected_node.parentNode.nextSibling.nodeName==selected_node.parentNode.nodeName)	&& this.getCellSelectable(selected_node.parentNode.nextSibling)	){		/*Cell selection*/		var ind = DOMHelper.getElementIndex(selected_node);		this.selectCell(selected_node.parentNode.nextSibling.childNodes[ind], selected_node);		res = true;	}					return res;}Grid.prototype.delRow = function(rowNode){		if (!rowNode){		rowNode = this.getSelectedNode();	}			if (rowNode){		var new_node = rowNode.nextSibling;		if (!new_node){			new_node = rowNode.previousSibling;		}			//mark in model		if (this.m_model){			this.setModelToCurrentRow(rowNode);			this.m_model.delRow();									}		DOMHelper.delNode(rowNode);				//set position to the next row on success		if (self.m_rowSelect){			self.selectRow(new_node);		}		else{			self.selectCell(new_node);		}			}}Grid.prototype.onDelete = function(){		var res = false;	if (this.m_cmdDelete){		var selected_node = this.getSelectedNode();		if (selected_node){			var self = this;			this.setFocused(false);			WindowQuestion.show({				"cancel":false,				"text":this.Q_DELETE,				"callBack":function(r){					if (r==WindowQuestion.RES_YES){						self.delRow(selected_node);					}					else{						self.focus();						}							}			});				res = true;		}	}	return res;}Grid.prototype.onSelect = function(){		this.m_onSelect(this.getModelRow());}/*Edit && Selection cases are treated here*/Grid.prototype.onEditSelect = function(event){		var res = false;	if (this.m_cmdEdit && (!this.m_onSelect || (this.m_onSelect && event.ctrlKey)) ){		/* Edit */		this.edit("edit");		res = true;	}	else if (this.m_onSelect && !event.ctrlKey){		/* Selection */		//Call onSelect function from parent form		//Return keys or model		//this.m_onSelect(this.getModelRow());		this.onSelect();		res = true;	}	return res;}Grid.prototype.onDblClick = function(ev){	ev = EventHelper.fixMouseEvent(ev);				this.onEditSelect(ev);	/*	if (this.m_cmdEdit){		this.edit(false);	}	*/}Grid.prototype.onClick = function(ev){	ev = EventHelper.fixMouseEvent(ev);	if (this.getEnabled() && ev.target.nodeName.toLowerCase()=="td" && ev.target.parentNode.parentNode.nodeName.toLowerCase()=="tbody"){		if (!this.getFocused()){			this.setFocused(true);		}				if (this.m_rowSelect){			var row = DOMHelper.getParentByTagName(ev.target,"tr");			if (row && this.getRowSelectable(row)){				this.selectRow(row, this.getSelectedNode());			}					}		else if (!this.m_rowSelect && this.getCellSelectable(ev.target)){			this.selectCell(ev.target, this.getSelectedNode());		}	}}Grid.prototype.initEditWinObj = function(cmd){	//this.setEnabled(false);	//var key_str = "";	var keys = {};	if (cmd!="insert"){		var fields = this.m_model.getFields();		var key_fields = this.getKeyIds();				if (key_fields && key_fields.length){			for (var i=0;i<key_fields.length;i++){				if (fields[key_fields[i]]){					keys[key_fields[i]] = fields[key_fields[i]].getValue();				}							}		}		else{						for (var id in fields){				if (fields[id].getPrimaryKey()){					//key_str+= (key_str=="")? "":"&"					//key_str+= id+"="+fields[id].getValue();					keys[id] = fields[id].getValue();				}			}		}	}	var self = this;	var win_id = CommonHelper.uniqid();	//this.m_editWinObj = new this.m_editWinClass({	this.m_editWinObjList[win_id] = new this.m_editWinClass({		"id":win_id,		"app":this.getApp(),		"onClose":function(res){			//set element current if ok			self.closeEditWinObj(res,this.getId());		},		"keys":keys,		"params":{			"cmd":cmd,			"editViewOptions":this.getEditViewOptions()		}	});	//this.m_editWinObj.open();	this.m_editWinObjList[win_id].open();}Grid.prototype.closeEditWinObj = function(res,winId){	//this.m_editWinObj.close();	//delete this.m_editWinObj;		if (this.m_editWinObjList[winId]){		this.m_editWinObjList[winId].close();		delete this.m_editWinObjList[winId];		}	this.refreshAfterEdit(res);}Grid.prototype.initEditView = function(parent,replacedNode,cmd){	this.setEnabled(false);		var view_opts = this.getEditViewOptions() || {};		view_opts.grid = this;	view_opts.onClose = function(res){		self.closeEditView(res);	};	view_opts.app = this.getApp();	view_opts.keys = this.getSelectedNodeKeys();	view_opts.cmd = cmd;	view_opts.winObj = (this.m_editWinClass)? this.m_editWinObj:this.getWinObj();	view_opts.row = this.getRow();		var self = this;	this.m_editViewObj = new this.m_editViewClass(this.getId()+":edit-view",view_opts);		this.m_editViewObj.setReplacedNode(replacedNode);	this.m_editViewObj.toDOM(parent);		}Grid.prototype.fillEditView = function(cmd){	//reading data for editViewObj case	if (cmd!="insert"){		this.m_editViewObj.read(cmd);	}	else if (this.m_model){		//ToDo default values	}}Grid.prototype.closeEditView = function(res){	//this.m_editViewObj.getDataBindings();	if (this.m_editViewObj.m_replacedNode){		this.m_editViewObj.m_node.parentNode.replaceChild(this.m_editViewObj.m_replacedNode,this.m_editViewObj.m_node);	}	this.m_editViewObj.delDOM();	delete this.m_editViewObj;		this.refreshAfterEdit(res);}Grid.prototype.refreshAfterEdit = function(res){	//if grid still exists	if (CommonHelper.nd(this.getId()) ){		if (this.m_parent){			this.delDOM();			this.toDOM(this.m_parent);		}		this.setEnabled(true);		this.focus();		if (res && res.updated){			//ToDo set to new Id			if (res.newKeys){				this.m_selectedRowKeys = CommonHelper.array2json(res.newKeys);				}			this.onRefresh();		}	}			}Grid.prototype.read = function(isCopy){	//@ToDo model => grid}/* 4 edit modes1) inline with editViewClass - javascript view2) same view as grid with editViewClass - javascript view3) editWinClass and editViewClass - javascript view with ext window4) editWinClass editViewClass=null - window with url@param string cmd Possible values: edit||copy||insert*/Grid.prototype.edit = function(cmd){	if (this.m_model && this.m_model.getLocked()){		//already in edit mode		return 0;	}		var sel_n = this.getSelectedNode();	this.setModelToCurrentRow(sel_n);	if (this.getEditInline()){		//inline edit		//console.log("Grid.prototype.edit cmd="+cmd);		this.initEditView(this.getBody().m_node, (cmd=="insert")? null:sel_n, cmd);	}	else if (this.m_editWinClass && !this.m_editViewClass){			//external window		this.initEditWinObj(cmd);	}		else if (!this.m_editWinClass && this.m_editViewClass){		//same window		var parent = this.m_parent;		this.removeDOM();		this.initEditView(this.getBody().m_node, null,cmd);		}	else if (this.m_editWinClass && this.m_editViewClass){		//ext window with view		//this.initEditView(this.getBody().m_node, null,cmd);		}		else{		//throw Error("");	}		if(this.m_editViewObj) this.fillEditView(cmd);}/*Returns true if row can be selected, not foot or system row*/Grid.prototype.getRowSelectable = function(row){	return (!DOMHelper.hasClass(row,"grid_foot")		&&!DOMHelper.hasClass(row,"grid_details")	);}/*Returns true if cell can be selected, not some system cell*/Grid.prototype.getCellSelectable = function(cell){	return (!DOMHelper.hasClass(cell,"grid_sys_col")	&&!DOMHelper.hasClass(cell.parentNode,"grid_foot")	);}/*Selects newNode and unselects oldNode*/Grid.prototype.selectNode = function(newNode,oldNode){	if (oldNode){		DOMHelper.delClass(oldNode,this.SELECTED_CLASS);	}	if (newNode){		DOMHelper.addClass(newNode,this.SELECTED_CLASS);		//scroll grid to row		//$(newNode).get(0).scrollIntoView();	}}/*Makes row current*/Grid.prototype.selectRow = function(newRow,oldRow){	if (newRow){		this.m_selectedRowKeys = newRow.getAttribute("keys");		this.m_selectedRowId = newRow.getAttribute("id");		this.selectNode(newRow,oldRow);	}}Grid.prototype.selectCell = function(newCell,oldCell){	if (newCell){		var tr = DOMHelper.getParentByTagName(newCell,"tr");		if (tr){			this.m_selectedRowKeys = tr.getAttribute("keys");			this.m_selectedRowId = tr.getAttribute("id");			this.m_selectedCellInd = DOMHelper.getElementIndex(newCell);			this.selectNode(newCell,oldCell);				}	}}/*	returns node row/cell*/Grid.prototype.getSelectedRow = function(){	var sel = DOMHelper.getElementsByAttr(this.SELECTED_CLASS,this.m_body.getNode(),"class",true,"tr");	return (sel.length)? sel[0]:null;}Grid.prototype.getSelectedCell = function(){	var sel = DOMHelper.getElementsByAttr(this.SELECTED_CLASS,this.m_body.getNode(),"class",true,"td");	return (sel.length)? sel[0]:null;}Grid.prototype.getSelectedNode = function(){	return (this.m_rowSelect)? this.getSelectedRow():this.getSelectedCell();}Grid.prototype.getSelectedNodeKeys = function(){	var selected_node = this.getSelectedNode();	if (selected_node){		return CommonHelper.unserialize(selected_node.getAttribute("keys"));	}}Grid.prototype.fixHeader = function(){	/*	if (this.m_fixedHeader){		$(this.getNode()).stickyTableHeaders({			"scrollableArea":$(this.m_cont.getNode())[0],			"fixedOffset":this.m_fixedOffset		});	}	*/	}Grid.prototype.onGetData = function(){	if (this.m_model){		//refresh from model		var self = this;		var body = this.getBody();		var foot = this.getFoot();		body.delDOM();		body.clear();			if (foot && foot.calcBegin){				this.m_foot.calcBegin();		}			if (!this.getHead())return;				var columns = this.getHead().getColumns();		//var temp_input;				var row_cnt = 0, field_cnt;		var row,row_keys;		this.m_model.reset();			var pag = this.getPagination();		if (pag){			pag.setCountTotal(this.m_model.getTotCount());		}			while(this.m_model.getNextRow()){			var row_id = this.getId()+":"+body.getName()+":"+row_cnt;			var row_class = (row_cnt%2==0)? "even":"odd";			if (this.m_onSelect){				row_class+=" for_select";			}			if (this.m_onEventSetRowClass){				this.m_onEventSetRowClass(this.m_model,row_class);			}					var r_class = this.getRowClass();			var row_opts = {"className":row_class,"app":this.getApp()};			/*			if (this.m_onSelect){				row_opts.events = row_opts.events || {};				row_opts.events.click = function(){					self.m_onSelect();				}			}			*/			row = new r_class(row_id,row_opts);					row_keys = {};			for(var k=0;k<this.m_keyIds.length;k++){				if (this.m_model.fieldExists(this.m_keyIds[k])){					row_keys[this.m_keyIds[k]] = this.m_model.getFieldValue(this.m_keyIds[k]);				}			}						field_cnt = 0;			for (var col_id=0;col_id<columns.length;col_id++){				columns[col_id].setGrid(this);				if (columns[col_id].getField() && columns[col_id].getField().getPrimaryKey()){					row_keys[columns[col_id].getField().getId()] = columns[col_id].getField().getValue();				}				var cell_class = columns[col_id].getCellClass();				var cell_opts = columns[col_id].getCellOptions() || {};				cell_opts.modelIndex = row_cnt;				cell_opts.fields = this.m_model.getFields();				cell_opts.row = row;				cell_opts.gridColumn = columns[col_id];				cell_opts.app = this.getApp();								var cell = new cell_class(row_id+":"+columns[col_id].getId(),cell_opts);								row.addElement(cell);												field_cnt++;							}					row.setAttr("keys",CommonHelper.array2json(row_keys));			row.setAttr("modelIndex",row_cnt);					//system cell			var row_cmd_class = this.getRowCommandClass();			if (row_cmd_class){				var row_class_options = {"grid":this,"app":this.getApp()};				row.addElement(new row_cmd_class(row_id+":cell-sys",row_class_options));			}			body.addElement(row);			row_cnt++;				/*			if (this.m_onSelect){				this.m_selects[row_id] = function(){					EventHandler.add(row.m_node,"click",function(){						self.m_onSelect();					},true);				};			}			*/			//foot			if (foot && foot.calc){					foot.calc(this.m_model);			}				}				if (this.getLastRowFooter() && row){			DOMHelper.addClass(row.m_node,"grid_foot");		}			if (foot && foot.calcEnd){				foot.calcEnd();		}				body.toDOM(this.m_node);			}	if (this.m_navigate){		this.setSelection();	}		if (this.m_onRefresh){		this.m_onRefresh.call(this);	}}/* Public */Grid.prototype.setCommands = function(commands){	this.m_commands = commands;}Grid.prototype.getCommands = function(){	return this.m_commands;}Grid.prototype.setPagination = function(pagination){	this.m_pagination = pagination;}Grid.prototype.getPagination = function(){	return this.m_pagination;}Grid.prototype.setFoot = function(foot){	this.m_foot = foot;}Grid.prototype.getFoot = function(){	return this.m_foot;}Grid.prototype.setHead = function(head){		this.m_head = head;}Grid.prototype.getHead = function(){	return this.m_head;}Grid.prototype.setBody = function(body){	this.m_body = body;}Grid.prototype.getBody = function(){	return this.m_body;}Grid.prototype.getRowCommandClass = function(){	return this.m_rowCommandClass;}Grid.prototype.setRowCommandClass = function(v){	this.m_rowCommandClass = v;}Grid.prototype.getEditInline = function(){	return this.m_editInline;}Grid.prototype.setEditInline = function(v){	this.m_editInline = v;}Grid.prototype.getOnSelect = function(){	//console.log("Grid.prototype.getOnSelect id="+this.getId()+" sel="+this.m_onSelect)	return this.m_onSelect;}Grid.prototype.setOnSelect = function(v){	//console.log("Grid.prototype.setOnSelect id="+this.getId()+" v="+v)	this.m_onSelect = v;}/*Grid.prototype.getMultySelect = function(){	return this.m_multySelect;}Grid.prototype.setMultySelect = function(v){	this.m_multySelect = v;}*/Grid.prototype.setAutoRefresh = function(autoRefresh){	this.m_autoRefresh = autoRefresh;}Grid.prototype.getAutoRefresh = function(){	return this.m_autoRefresh;}Grid.prototype.setPopUpMenu=function(menu){	this.m_popUpMenu = menu;}Grid.prototype.getPopUpMenu = function(){	return this.m_popUpMenu;}Grid.prototype.setRowSelect = function(v){	this.m_rowSelect = v;}Grid.prototype.getRowSelect=function(){	return this.m_rowSelect;}Grid.prototype.setContClassName = function(v){	this.m_contClassName = v;}Grid.prototype.getContClassName = function(){	return this.m_contClassName;}Grid.prototype.setLastRowFooter = function(v){	this.m_lastRowFooter = v;}Grid.prototype.getLastRowFooter = function(){	return this.m_lastRowFooter;}Grid.prototype.setResize = function(v){	this.m_resize = v;}Grid.prototype.getResize = function(){	return this.m_resize;}Grid.prototype.setCmdInsert = function(v){	this.m_cmdInsert = v;}Grid.prototype.getCmdInsert = function(){	return this.m_cmdInsert;}Grid.prototype.setCmdEdit = function(v){	this.m_cmdEdit = v;}Grid.prototype.getCmdEdit = function(){	return this.m_cmdEdit;}Grid.prototype.setCmdCopy = function(v){	this.m_cmdCopy = v;}Grid.prototype.getCmdCopy = function(){	return this.m_cmdCopy;}Grid.prototype.setCmdDelete = function(v){	this.m_cmdDelete = v;}Grid.prototype.getCmdDelete = function(){	return this.m_cmdDelete;}Grid.prototype.setCmdPrint = function(v){	this.m_cmdPrint = v;}Grid.prototype.getCmdPrint = function(){	return this.m_cmdPrint;}Grid.prototype.setNavigate = function(v){	this.m_navigate = v;	if (this.m_navigate){		this.setTabIndex(this.getTabIndex() || this.DEF_TAB_INDEX);	}	}Grid.prototype.getNavigate = function(){	return this.m_navigate;}Grid.prototype.setRefreshInterval = function(v){	this.m_refInterval = v;	if (v==0 && this.m_refIntervalObj!=undefined){				window.clearInterval(this.m_refIntervalObj);	}	else if (v>0){		var self = this;		this.m_refIntervalObj = setInterval(function(){			self.onRefresh();		},v);	}}Grid.prototype.getRefreshInterval = function(){	return this.m_refInterval;}Grid.prototype.setEditViewClass = function(v){	this.m_editViewClass = v;}Grid.prototype.getEditViewClass = function(){	return this.m_editViewClass;}Grid.prototype.setEditViewOptions = function(v){	this.m_editViewOptions = v;}Grid.prototype.getEditViewOptions = function(){	return this.m_editViewOptions;}Grid.prototype.setEditWinClass = function(v){	this.m_editWinClass = v;}Grid.prototype.getEditWinClass = function(){	return this.m_editWinClass;}/*Grid.prototype.getEditWinObj = function(){	return this.m_editWinObj;}*/Grid.prototype.setEnabled = function(v){	if (this.m_head) this.m_head.setEnabled(v);	if (this.m_body) this.m_body.setEnabled(v);	if (this.m_foot) this.m_foot.setEnabled(v);	if (this.m_commands) this.m_commands.setEnabled(v);		if (!v){				this.m_interval = this.getRefreshInterval();		this.setRefreshInterval(0);		if(this.m_model)this.m_model.setLocked(true);		}	else{		if(this.m_model)this.m_model.setLocked(false);			this.setRefreshInterval(this.m_interval);												}		Grid.superclass.setEnabled.call(this,v);}Grid.prototype.toDOM = function(parent){	this.m_container = new Control(this.getId()+":cont","div");			//command panel	if (this.m_commands) this.m_commands.toDOM(this.m_container.getNode());		//scrollable area	this.m_containerScroll = new Control(this.getId()+":cont-scroll","div",{className:"scrollable-area "+this.getId()+" "+this.m_contClassName});					//grid		if (this.m_head) this.m_head.toDOM(this.m_node);	if (this.m_body) this.m_body.toDOM(this.m_node);		if (this.m_foot) this.m_foot.toDOM(this.m_node);				Grid.superclass.toDOM.call(this, this.m_containerScroll.getNode());		this.m_containerScroll.toDOM(this.m_container.getNode());	//pagination	if (this.m_pagination) this.m_pagination.toDOM(this.m_container.getNode());		this.m_container.toDOM(parent);		if (this.m_autoRefresh){		this.onRefresh();	}		if (this.m_resize){		//ColumnResize(this.m_node);	}		if (this.m_navigate){		this.initNavigation();		this.setSelection();	}		if (this.getPopUpMenu()!=undefined){		this.getPopUpMenu().bind(this.m_body.getNode());	}		this.fixHeader();		this.m_rendered = true;		if (!this.m_autoRefresh){		this.onGetData();	}}Grid.prototype.delDOM = function(){	this.setRefreshInterval(0);		if (this.m_commands) this.m_commands.delDOM();	if (this.m_pagination) this.m_pagination.delDOM();		//grid		if (this.m_head) this.m_head.delDOM();	if (this.m_body) this.m_body.delDOM();		if (this.m_foot) this.m_foot.delDOM();					EventHelper.del(this.m_node,'focus',this.m_focusEvent,false);		EventHelper.del(this.m_node,'blur',this.m_blurEvent,false);			Grid.superclass.delDOM.call(this);		this.m_containerScroll.delDOM();	this.m_container.delDOM();		this.m_rendered = false;}Grid.prototype.getFocused = function(){	return DOMHelper.hasClass(this.m_node,this.FOCUSED_CLASS);}Grid.prototype.setFocused = function(focused){	if (this.m_node && focused && !this.getFocused()){		var tables = this.getWinObjDocument().getElementsByTagName("table");		for (var i=0;i<tables.length;i++){			DOMHelper.delClass(tables[i],this.FOCUSED_CLASS);		}		DOMHelper.addClass(this.m_node,this.FOCUSED_CLASS);				this.addKeyEvents();	}	else if(this.m_node && !focused){		DOMHelper.delClass(this.m_node,this.FOCUSED_CLASS);				if (!CommonHelper.isIE()){			this.delKeyEvents();		}	}}Grid.prototype.focus = function(){	this.setFocused(true);	this.getNode().focus();}Grid.prototype.getModel = function(){	return this.m_model;}Grid.prototype.setModel = function(m){	this.m_model = m;}Grid.prototype.getRowClass = function(){	return this.m_rowClass;}Grid.prototype.setRowClass = function(v){	this.m_rowClass = v;}Grid.prototype.onError = function(erStr){			var self = this;	window.showError(erStr,function(){		self.setFocused(true);	});}Grid.prototype.onEdit = function(){	if (this.m_cmdEdit){		this.edit("edit");	}}Grid.prototype.onCopy = function(){	if (this.m_cmdCopy){		this.edit("copy");	}}Grid.prototype.onInsert = function(){	if (this.m_cmdInsert){		this.edit("insert");	}}Grid.prototype.onPrint = function(){	if (this.m_cmdPrint){		WindowPrint.show({content:this.getNode().outerHTML});	}}Grid.prototype.onRefresh = function(){	this.onGetData();		if (this.m_onEventRefresh){		this.m_onEventRefresh();	}}Grid.prototype.setModelToCurrentRow = function(rowNode){	if (!rowNode){		rowNode = this.getSelectedNode();	}	var ind = parseInt(DOMHelper.getAttr(rowNode,"modelIndex"));	if (!isNaN(ind)){		this.m_model.getRow(ind);	}}Grid.prototype.getModelRow = function(){	this.setModelToCurrentRow();	return this.m_model.getFields();}Grid.prototype.getRow = function(){	var row_n = this.getSelectedRow();	if (row_n){		return this.getBody().getElement(row_n.getAttribute("modelIndex"));	}}Grid.prototype.setKeyIds = function(v){	this.m_keyIds = v;}Grid.prototype.getKeyIds = function(){	return this.m_keyIds;}