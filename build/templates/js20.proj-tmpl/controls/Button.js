/**	 * @author Andrey Mikhalevich <katrenplus@mail.ru>  * @class * @classdesc Vasic button visual control  * @extends Control   * @requires core/DOMHelper.js * @requires core/EventHelper.js * @requires controls/Control.js * @param {string} id Object identifier * @param {object} options   * @param {string} [options.tagName=this.DEF_TAG_NAME]  * @param {string} [options.className=this.DEF_CLASS] * @param {string} options.caption * @param {string} options.glyph * @param {string} options.glyphPopUp     * @param {function} options.onClick */function Button(id,options){		options = options || {};	options.className = options.className || this.DEF_CLASS;	options.attrs = options.attrs || {};		options.title = options.title || options.attrs.title || options.hint || this.DEF_TITLE;		Button.superclass.constructor.call(this,id, (options.tagName || this.DEF_TAG_NAME), options);		this.setCaption(options.caption);	this.setGlyph(options.glyph || options.attrs.glyph);	this.setGlyphPopUp(options.glyphPopUp);		var self = this;	this.m_clickFunc = function(e){		if (self.getEnabled() && self.m_onClick){			e = EventHelper.fixMouseEvent(e);			self.m_onClick.call(self,e);		}	}		if (options.onClick!=undefined){		this.setOnClick(options.onClick);	}		}extend(Button,Control);/* constants */Button.prototype.DEF_TAG_NAME = "DIV";Button.prototype.DEF_CLASS = "btn btn-default";Button.prototype.DEF_TITLE;/* private members */Button.prototype.m_glyph;Button.prototype.m_glyphPopUp;/* public methods */Button.prototype.setCaption = function(caption){	if (caption){		if (this.m_node.childNodes.length==0){			this.m_node.appendChild(document.createTextNode(caption));		}		else{			this.m_node.childNodes[0].nodeValue = caption;		}	}}Button.prototype.getCaption = function(){	return (this.m_node && this.m_node.childNodes && this.m_node.childNodes[0])? this.m_node.childNodes[0].nodeValue:"";}Button.prototype.getGlyph = function(){	return this.m_glyph;}Button.prototype.setGlyph = function(glyph){	this.m_glyph = glyph;	if (glyph){		var n;		if (this.m_node){			var ar = DOMHelper.getElementsByAttr("glyphicon",this.m_node,"class",true,"i");			if (ar && ar.length){				n = ar[0];				n.className = "glyphicon "+glyph;			}		}		if (!n){			n = document.createElement("I");			n.className = (glyph.indexOf("glyphicon-")>=0)? ("glyphicon "+glyph) : glyph;			this.m_node.appendChild(n);								}			}}Button.prototype.getGlyphPopUp = function(){	return this.m_glyphPopUp;}Button.prototype.setGlyphPopUp = function(v){	this.m_glyphPopUp = v;}Button.prototype.setOnClick = function(onClick){	var self = this;	this.m_onClick = function(e){		//e = EventHelper.fixMouseEvent(e);		onClick.call(self,e);	}	this.addClick();}Button.prototype.getOnClick = function(){	return this.m_onClick;}Button.prototype.addClick = function(){	var self = this;	EventHelper.add(this.m_node,"click", this.m_clickFunc,false);}Button.prototype.removeClick = function(){	var self = this;	EventHelper.del(this.m_node,"click", this.m_clickFunc,false);}Button.prototype.click = function(){	this.m_clickFunc.call(this,null);}