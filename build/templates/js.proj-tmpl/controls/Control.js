/* Copyright (c) 2012 	Andrey Mikhalevich, Katren ltd.*//*		Description*///Ñ„/** Requirements  * @requires common/DOMHandler.js*//* constructor */function Control(id,tagName,options){	options = options || {};	tagName = tagName || this.DEF_TAG_NAME;		if (!tagName){		throw new Error("Control id='"+id+"' tagName is undefined!");	}	this.m_node = document.createElement(tagName);		this.setId(id);	if (options.className){		this.setClassName(options.className);	}	if (options.value)		this.setValue(options.value);			options.attrs=options.attrs||{};	if (options.attrs.disabled&&options.attrs.disabled=="disabled"){		options.enabled = false;	}		this.setEnabled((options.enabled!=undefined)? options.enabled:this.DEF_ENABLED);	this.setVisible((options.visible!=undefined)? options.visible:this.DEF_VISIBLE);	this.setReadOnly((options.readOnly!=undefined)? options.readOnly:this.DEF_READ_ONLY);		if (options.required!=undefined&&options.required){		this.setRequired(true);	}		this.setAlwaysUpdate(options.alwaysUpdate);		//extra DOM attributes	for (var attr in options.attrs) {		if (attr!="disabled"){			this.setAttr(attr,options.attrs[attr]);		}	}		this.m_winObj = options.winObj;	this.m_events = options.events;}/* constants */Control.prototype.DEF_TAG_NAME = "div";Control.prototype.CLASS_DISABLED = "disabled";Control.prototype.CLASS_READ_ONLY = "readOnly";Control.prototype.CLASS_NOT_VISIBLE = "invisible";Control.prototype.DEF_READ_ONLY = false;Control.prototype.DEF_ENABLED = true;Control.prototype.DEF_VISIBLE = true;/* private members */Control.prototype.m_node;/* public methods */Control.prototype.setId = function(id){	if (id){		this.m_node.id = id;	}}Control.prototype.getId = function(){	return DOMHandler.getAttr(this.m_node,'id');}Control.prototype.setEnabled = function(enabled){	if (enabled){		DOMHandler.removeAttr(this.m_node,"disabled");	}	else{		DOMHandler.setAttr(this.m_node,"disabled","disabled");	}}Control.prototype.getEnabled = function(){	return !(DOMHandler.getAttr(this.m_node,"disabled"));}Control.prototype.setVisible = function(visible){	if (visible){		DOMHandler.removeClass(this.m_node,this.CLASS_NOT_VISIBLE);	}	else{		DOMHandler.addClass(this.m_node,this.CLASS_NOT_VISIBLE);	}}Control.prototype.setRequired = function(required){	if (!required){		DOMHandler.removeAttr(this.m_node,"required");	}	else{		DOMHandler.addAttr(this.m_node,"required","required");	}}Control.prototype.getVisible = function(){	return !DOMHandler.hasClass(this.m_node,this.CLASS_NOT_VISIBLE);}Control.prototype.setReadOnly = function(readOnly){	if (readOnly){		DOMHandler.addClass(this.m_node,this.CLASS_READ_ONLY);	}	else{		DOMHandler.removeClass(this.m_node,this.CLASS_READ_ONLY);	}}Control.prototype.getReadOnly = function(){	return DOMHandler.hasClass(this.m_node,this.CLASS_READ_ONLY);}Control.prototype.getNode = function(){	return this.m_node;}Control.prototype.appendToNode = function(parent){	parent.appendChild(this.m_node);}Control.prototype.setValue = function(val){	if (this.m_node.childNodes!=undefined && 	this.m_node.childNodes.length){		this.m_node.childNodes[0].nodeValue = val;	}	else{		this.m_node.appendChild(document.createTextNode(val));	}}Control.prototype.getValue = function(){	if (this.m_node.childNodes && this.m_node.childNodes.length){		return this.m_node.childNodes[0].nodeValue;	}}/*Control.prototype.getOldValue = function(){	return this.getAttr("old_"+this.getId());}*/Control.prototype.getValueStr = function(){	return this.getValue();}Control.prototype.eventsToDOM = function(){	for (var ev in this.m_events){		var id = ev.toLowerCase();		if (id.substring(0,2)=="on"){			id = id.substring(2);		}		var self = this;		EventHandler.addEvent(this.m_node,id,			function(e){				self.m_events[ev].call(self,this,e);			},true);	}	}Control.prototype.toDOMAfter = function(node){	var sibl = node.nextSibling;	var p = node.parentNode;	if (sibl){		p.insertBefore(this.m_node,sibl);	}	else{		p.appendChild(this.m_node);	}		this.eventsToDOM();}Control.prototype.nodeToDOM = function(parent){	var sibl;	var n = nd(this.getId(),this.getWinObjDocum());	if (n){		parent = n.parentNode;		sibl = n.nextSibling;		parent.removeChild(n);	}	//console.trace();	if (!parent){		console.trace();		throw new Error("Control id="+this.getId()+", parent is not defined");	}	if (sibl){		parent.insertBefore(this.m_node,sibl);	}	else{		parent.appendChild(this.m_node);	}	/*	if (this.m_HTMLTeplate){		this.m_node.innerHTML = this.m_HTMLTeplate;	}	*/}Control.prototype.toDOM = function(parent){	this.nodeToDOM(parent);	this.eventsToDOM();}/*Control.prototype.setValue = function(value){	this.m_node.innerHTML = value;}*/Control.prototype.setAttr = function(name,value){	DOMHandler.setAttr(this.m_node,name,value);}Control.prototype.getAttr = function(name){	//return (this.m_node[name]!=undefined)? this.m_node[name]:null;	return DOMHandler.getAttr(this.m_node,name);}Control.prototype.removeAttr = function(name){	DOMHandler.removeAttr(name);}Control.prototype.setClassName = function(className){	if (className && className.length>0){		this.m_node.className = className;	}}Control.prototype.getClassName = function(){	return this.m_node.className;}Control.prototype.removeDOM = function(){	DOMHandler.removeNode(this.m_node);}Control.prototype.setWinObj = function(winObj){	this.m_winObj = winObj;}Control.prototype.getWinObjDocum = function(){	if (this.m_winObj){		try{		return this.m_winObj.getWindowForm().document;		}		catch(e){			alert(e.stack);		}	}	else{		return window.document;	}}/*returns this form node*/Control.prototype.$ = function(n){	return nd(n,this.getWinObjDocum());}/*Control.prototype.setFormerValue = function(){}Control.prototype.getFormerValue = function(){}*/Control.prototype.getValueAsObj= function(){	return {"descr":this.getValue()};}Control.prototype.setValueFromObj= function(obj){	this.setValue(obj.descr);}Control.prototype.getAlwaysUpdate= function(){	return this.m_alwaysUpdate;}Control.prototype.setAlwaysUpdate= function(v){	this.m_alwaysUpdate = v;}/*Control.prototype.setFieldValue= function(name,val){	this.setAttr("fkey_"+name,val);	this.setAttr(this.FORMER_KEY_VAL+name,val);}*/Control.prototype.setGlobalWait = function(isWait){	var n = this.$("waiting");		if (n&&isWait){				DOMHandler.removeClass(n,"invisible");	}	else if (n){		DOMHandler.addClass(n,"invisible");	}}