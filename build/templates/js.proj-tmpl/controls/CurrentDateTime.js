/* Copyright (c) 2014	Andrey Mikhalevich, Katren ltd.*//***/function CurrentDateTime(id,options){	options = options || {};		this.m_pattern = options.pattern||this.DEF_PATTERN;	this.m_interval = options.interval||this.DEF_INTERVAL;		CurrentDateTime.superclass.constructor.call(this,		id,"div",options);	this.m_sync = options.sync;	this.m_resyncInterval = options.resyncInterval;}extend(CurrentDateTime,Control);CurrentDateTime.prototype.DEF_PATTERN = "dd M yy hh:mmin";CurrentDateTime.prototype.DEF_INTERVAL = 30000;//1 minuteCurrentDateTime.prototype.DEF_RESYNC_INTERVAL = 60*60*1000;CurrentDateTime.prototype.SYNC_SCRIPT = "functions/ntp.php";CurrentDateTime.prototype.sync = function(){	var con = new ServConnector(HOST_NAME,this.SYNC_SCRIPT);	this.m_t0 = (new Date()).valueOf();	var self = this;	con.sendRequest(true,null,true,		function(error_n,error_s,resp){			var t1 = resp;            var t2 = resp;            var t3 = (new Date()).valueOf();					var c = ntp(this.m_t0, t1, t2, t3);			this.m_offset = c.offset;			//console.log("NTP delay:", c.roundtripdelay, "NTP offset:", c.offset, "corrected: ", (new Date(t3 + c.offset)));		}		,this,false);}CurrentDateTime.prototype.update = function(){	var time;	if (this.m_sync&&this.m_offset){		time = new Date((new Date()).valueOf() + this.m_offset);	}	this.setValue(DateHandler.dateToStr(time,this.m_pattern));}CurrentDateTime.prototype.toDOM = function(parent){	CurrentDateTime.superclass.toDOM.call(this,parent);	this.update();	var self = this;	this.m_intervalObj = setInterval(function(){		self.update();	},this.m_interval);		if (this.m_sync){		this.sync();		this.m_ResyncIntervalObj = setInterval(function(){			self.sync();		},this.m_resyncInterval||this.DEF_RESYNC_INTERVAL);		}}CurrentDateTime.prototype.removeDOM = function(){	clearInterval(this.m_intervalObj);	clearInterval(this.m_ResyncIntervalObj);	CurrentDateTime.superclass.removeDOM.call(this);	}// the NTP algorithm// t0 is the client's timestamp of the request packet transmission,// t1 is the server's timestamp of the request packet reception,// t2 is the server's timestamp of the response packet transmission and// t3 is the client's timestamp of the response packet reception.function ntp(t0, t1, t2, t3) {    return {        roundtripdelay: (t3 - t0) - (t2 - t1),        offset: ((t1 - t0) + (t2 - t3)) / 2    };}