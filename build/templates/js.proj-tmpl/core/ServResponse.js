/* Copyright (c) 2012 	Andrey Mikhalevich, Katren ltd.*//*		ServResponse class	Parses XML server response*//** Requirements * @requires core/Model.js * @requires common/DOMHandler.js */function ServResponse(){	}/* constants */ServResponse.prototype.RESP_MODEL_ID = 'ModelServResponse';ServResponse.prototype.ERR_INDEX_OUT_OF_BOUNDS = 'Index out of bounds.';ServResponse.prototype.ERR_NO_MODEL = 'Model %s not found.';ServResponse.prototype.MODEL_TAG = 'model';ServResponse.prototype.MODEL_ATTR_ID = "id";ServResponse.prototype.ER_EMPTY_RESPONSE = "Server response string is empty.";/* private members */ServResponse.prototype.m_xml;ServResponse.prototype.m_respResult;ServResponse.prototype.m_respDescr;ServResponse.prototype.m_models;/* private methods *//* public methods */ServResponse.prototype.parse = function(xml){	if (xml==undefined){		throw new Error(this.ER_EMPTY_RESPONSE);	}	this.m_models={};	//iterates through all model nodes	this.m_xml = xml;	var nodes = this.m_xml.documentElement.getElementsByTagName(this.MODEL_TAG);	var id,new_model,obj_exists;	for (var i=0;i<nodes.length;i++){		id = DOMHandler.getAttr(nodes[i],this.MODEL_ATTR_ID);		if (id){			if (eval("typeof "+id+"== 'function'")) {				this.m_models[id] = eval("new "+id+"()");			}			else{				this.m_models[id] = new Model();			}			this.m_models[id].setNode(nodes[i]);			//this.m_models[id] = new_model;		}	}	var resp_model = this.getModelById(this.RESP_MODEL_ID);	this.m_respResult = resp_model.result.getValue();	this.m_respDescr = resp_model.descr.getValue();}ServResponse.prototype.getRespResult = function(){	return this.m_respResult;}ServResponse.prototype.getRespDescr = function(){	return this.m_respDescr;}ServResponse.prototype.getModelCount = function(){	return this.m_models.length;}ServResponse.prototype.getModelByIndex = function(ind){	if (ind>=this.getModelCount()){		throw new Error(this.ERR_INDEX_OUT_OF_BOUNDS);	}	return -1;}ServResponse.prototype.modelExists = function(id){	return (this.m_models[id]!=undefined);}ServResponse.prototype.getModelById = function(id,active){	if (!this.modelExists(id)){		throw new Error(format(this.ERR_NO_MODEL,Array(id)));	}	if (active){		this.m_models[id].setActive(true);	}	return this.m_models[id];}