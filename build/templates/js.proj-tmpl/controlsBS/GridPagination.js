/* Copyright (c) 2012 	Andrey Mikhalevich, Katren ltd.*//*		Description*///ф/** Requirements* @requires controls/ControlContainer.js *//* constructor */function GridPagination(id,options){	options = options || {};		GridPagination.superclass.constructor.call(this, id, (options.tagName || this.DEF_TAG_NAME), options);				var self = this;		this.m_inf = new Control(id+":inf","span");	this.m_showPageCount = (options.showPageCount)? parseInt(options.showPageCount):this.DEF_PAGES;	if (this.m_showPageCount){		this.m_pages = new ControlContainer(id+":pages","span",{"className":"pagination-pages"});	}		//buttons	this.m_btnsCont = new ControlContainer(id+":bns_cont","span",{"className":"pagination-pages"});			var ctrl_class = "btn btn-xs";		this.m_ctrlGoFirst = new Button(id+":go_first",	{"glyph":"glyphicon-fast-backward",	"className":ctrl_class,	"onClick":function(){		self.setFrom(0);		self.m_onGridRefresh.call(self.m_clickContext);		},	"attrs":{"title":"в начало"}	});	this.m_btnsCont.addElement(this.m_ctrlGoFirst);		this.m_ctrlGoPrev = new Button(id+":go_prev",	{"glyph":"glyphicon-step-backward",	"className":ctrl_class,	"onClick":function(){		self.setFrom(Math.max(0,self.m_from - self.m_countPerPage));		self.m_onGridRefresh.call(self.m_clickContext);		},	"attrs":{"title":"предыдущая"}	});	this.m_btnsCont.addElement(this.m_ctrlGoPrev);			this.m_ctrlGoNext = new Button(id+":go_next",		{"glyph":"glyphicon-step-forward",	"className":ctrl_class,	"onClick":function(){		var from = self.m_from + self.m_countPerPage;		from = (from>=self.m_countTotal)? self.m_from:from;		self.setFrom(from);		self.m_onGridRefresh.call(self.m_clickContext);		},	"attrs":{"title":"следующая"}	});		this.m_btnsCont.addElement(this.m_ctrlGoNext);		this.m_ctrlGoLast = new Button(id+":go_last",	{"glyph":"glyphicon-fast-forward",	"className":ctrl_class,	"onClick":function(){		var pages = Math.floor(self.m_countTotal / self.m_countPerPage);		if ((self.m_countTotal%self.m_countPerPage)==0){			pages--;		}		self.setFrom(pages*self.m_countPerPage);		self.m_onGridRefresh.call(self.m_clickContext);		},	"attrs":{"title":"в конец"}	});		this.m_btnsCont.addElement(this.m_ctrlGoLast);		options.from = options.from || 0;	this.setFrom(options.from);		if (options.countPerPage){		this.setCountPerPage(options.countPerPage);	}	}extend(GridPagination,Control);GridPagination.prototype.DEF_PAGES = 10;GridPagination.prototype.DEF_TAG_NAME = "div";GridPagination.prototype.m_countTotal;GridPagination.prototype.m_countPerPage;GridPagination.prototype.m_from;GridPagination.prototype.m_onGridRefresh;GridPagination.prototype.m_clickContext;GridPagination.prototype.m_inf;GridPagination.prototype.getFrom = function(){	return this.m_from;}GridPagination.prototype.getCountPerPage = function(){	return this.m_countPerPage;}GridPagination.prototype.setCountTotal = function(countTotal){	this.m_countTotal = parseInt(countTotal);	this.setInf();}GridPagination.prototype.setCountPerPage = function(countPerPage){	this.m_countPerPage = parseInt(countPerPage);	}GridPagination.prototype.setFrom = function(from){	this.m_from = parseInt(from);		this.setInf();}GridPagination.prototype.setOnGridRefresh = function(onGridRefresh){	this.m_onGridRefresh = onGridRefresh;}GridPagination.prototype.setClickContext = function(clickContext){	this.m_clickContext = clickContext;}GridPagination.prototype.setFirstEnabled = function(enabled){	//this.m_from = from;}GridPagination.prototype.setInf = function(){	var pages = Math.ceil(this.m_countTotal / this.m_countPerPage);		var page = Math.ceil(this.m_from / this.m_countPerPage)+1;	if (isNaN(pages)) pages = 1;	if (isNaN(page)) page = 1;		this.m_inf.setValue("Страниц: "+pages);		this.m_ctrlGoFirst.setEnabled((page>1));	this.m_ctrlGoPrev.setEnabled((page>1));			if (page == pages){		this.m_ctrlGoLast.setEnabled(false);		this.m_ctrlGoNext.setEnabled(false);	}	else{		this.m_ctrlGoLast.setEnabled(true);		this.m_ctrlGoNext.setEnabled(true);	}		if (this.m_showPageCount && this.m_inf.getNode().parentNode){		this.m_pages.removeDOM();		this.m_pages.clear();				var self = this;				//previous		var prev_from = page - this.m_showPageCount;		if (prev_from<1) prev_from = 1;		for (var pg=prev_from; pg < page; pg++){			this.m_pages.addElement(new Control(uuid(),"span",{				"className":"pagination-page",				"attrs":{"title":"Перейти на страницу "+pg,"to_page":pg},				"value":pg,				"events":{					"click":function(e){						self.goToPageFromEvent(e);					}				}			}));		}				//current		if (pages>1){			this.m_pages.addElement(new Control(uuid(),"span",{				"className":"pagination-page badge pagination-page-cur",				"attrs":{"title":"Текущая страница"},				"value":page			}));		}						//next		var nxt_to = page + this.m_showPageCount;		if (nxt_to>pages) nxt_to = pages;		for (var pg=page+1; pg <= nxt_to; pg++){			this.m_pages.addElement(new Control(uuid(),"span",{				"className":"pagination-page",				"attrs":{"title":"Перейти на страницу "+pg,"to_page":pg},				"value":pg,				"events":{					"click":function(e){						self.goToPageFromEvent(e);					}				}			}));		}				this.m_pages.toDOMAfter(this.m_btnsCont.getNode());	}}GridPagination.prototype.goToPageFromEvent = function(e){	e = EventHandler.fixMouseEvent(e);	var pg = DOMHandler.getAttr(e.target,"to_page");	this.setFrom((pg-1)*this.m_countPerPage);	this.m_onGridRefresh.call(this.m_clickContext);}GridPagination.prototype.toDOM = function(parent){	GridPagination.superclass.toDOM.call(this,parent);	this.m_inf.toDOM(this.m_node);	this.m_btnsCont.toDOM(this.m_node);		this.setInf();	}GridPagination.prototype.removeDOM = function(){	if (this.m_showPageCount){		this.m_pages.removeDOM();	}	this.m_inf.removeDOM();		this.m_btnsCont.removeDOM();	GridPagination.superclass.removeDOM.call(this);		}