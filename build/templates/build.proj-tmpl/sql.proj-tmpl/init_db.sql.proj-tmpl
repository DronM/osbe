CREATE USER START_PROJ_FIELD_DB_USER WITH PASSWORD 'START_PROJ_FIELD_DB_PASSWORD';
CREATE DATABASE START_PROJ_FIELD_DB_NAME;
GRANT ALL PRIVILEGES ON DATABASE START_PROJ_FIELD_DB_NAME TO START_PROJ_FIELD_DB_USER;
GRANT SELECT ON ALL TABLES IN SCHEMA public TO START_PROJ_FIELD_DB_USER;

-- Table: logins

-- DROP TABLE logins;

CREATE TABLE logins
(
  id serial NOT NULL,
  date_time_in timestamp with time zone NOT NULL,
  date_time_out timestamp with time zone,
  ip character varying(15) NOT NULL,
  session_id character(128) NOT NULL,
  user_id integer,
  pub_key character(15),
  set_date_time timestamp without time zone DEFAULT now(),
  CONSTRAINT logins_pkey PRIMARY KEY (id)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE logins
  OWNER TO USER START_PROJ_FIELD_DB_USER WITH;

-- Index: logins_session_id_index

-- DROP INDEX logins_session_id_index;

CREATE INDEX logins_session_id_index
  ON logins
  USING btree
  (session_id COLLATE pg_catalog."default");

-- Index: users_pub_key_index

-- DROP INDEX users_pub_key_index;

CREATE INDEX users_pub_key_index
  ON logins
  USING btree
  (pub_key COLLATE pg_catalog."default");


-- Trigger: logins_trigger on logins

-- DROP TRIGGER logins_trigger ON logins;

CREATE TRIGGER logins_trigger
  AFTER UPDATE OR DELETE
  ON logins
  FOR EACH ROW
  EXECUTE PROCEDURE logins_process();



-- Table: sessions

-- DROP TABLE sessions;

CREATE TABLE sessions
(
  id character(128) NOT NULL,
  data text NOT NULL,
  pub_key character varying(15),
  set_time timestamp without time zone NOT NULL
)
WITH (
  OIDS=FALSE
);
ALTER TABLE sessions
  OWNER TO USER START_PROJ_FIELD_DB_USER;

-- Index: sessions_pub_key_index

-- DROP INDEX sessions_pub_key_index;

CREATE INDEX sessions_pub_key_index
  ON sessions
  USING btree
  (pub_key COLLATE pg_catalog."default");

-- Index: sessions_set_time_idx

-- DROP INDEX sessions_set_time_idx;

CREATE INDEX sessions_set_time_idx
  ON sessions
  USING btree
  (set_time);

-- Function: sess_gc(interval)

-- DROP FUNCTION sess_gc(interval);

CREATE OR REPLACE FUNCTION sess_gc(in_lifetime interval)
  RETURNS void AS
$BODY$	
	UPDATE logins
	SET date_time_out = now()
	WHERE session_id IN (SELECT id FROM sessions WHERE set_time<(now()-in_lifetime));
	
	DELETE FROM sessions WHERE set_time < (now()-in_lifetime);
$BODY$
  LANGUAGE sql VOLATILE
  COST 100;
ALTER FUNCTION sess_gc(interval)
  OWNER TO START_PROJ_FIELD_DB_USER;

-- Function: sess_write(character varying, text, character varying)

-- DROP FUNCTION sess_write(character varying, text, character varying);

CREATE OR REPLACE FUNCTION sess_write(
    in_id character varying,
    in_data text,
    in_remote_ip character varying)
  RETURNS void AS
$BODY$
BEGIN
	UPDATE sessions
	SET
		set_time = now(),
		data = in_data
	WHERE id = in_id;
	
	IF FOUND THEN
		RETURN;
	END IF;
	
	BEGIN
		INSERT INTO sessions (id, data, set_time)
		VALUES(in_id, in_data, now());
		
		INSERT INTO logins(date_time_in,ip,session_id)
		VALUES(now(),in_remote_ip,in_id);
		
	EXCEPTION WHEN OTHERS THEN
		UPDATE sessions
		SET
			set_time = now(),
			data = in_data
		WHERE id = in_id;
	END;
	
	RETURN;

END;	
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION sess_write(character varying, text, character varying)
  OWNER TO USER START_PROJ_FIELD_DB_USER;

